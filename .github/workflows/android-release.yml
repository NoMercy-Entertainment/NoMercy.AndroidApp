name: Android Release & Download Page

on:
  push:
    branches:
      - master

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      VERSION_NAME: ${{ steps.set_version.outputs.VERSION_NAME }}
      VERSION_CODE: ${{ steps.set_version.outputs.VERSION_CODE }}
      RELEASE_ID: ${{ steps.create_release.outputs.id }}
      UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          repository: NoMercy-Entertainment/NoMercy.AndroidApp

      - name: Set Android versionCode and versionName
        id: set_version
        run: |
          VERSION_CODE=${{ github.run_number }}
          DATE=$(date +"%Y.%m.%d")
          EXTRA_VERSION=$(git tag --list "v${DATE}-*" | wc -l)
          if [ "$EXTRA_VERSION" -gt 0 ]; then
            VERSION_NAME="${DATE}-$((EXTRA_VERSION + 1))"
          else
            VERSION_NAME="${DATE}"
          fi
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT

      - name: Delete existing tag if exists
        run: |
          git tag -d v${{ steps.set_version.outputs.VERSION_NAME }} 2>/dev/null || true
          git push origin :refs/tags/v${{ steps.set_version.outputs.VERSION_NAME }} 2>/dev/null || true
        continue-on-error: true

      - name: Delete existing release if exists
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/NoMercy-Entertainment/NoMercy.AndroidApp/releases/tags/v${{ steps.set_version.outputs.VERSION_NAME }} \
            | jq -r '.id')
          if [ "$RELEASE_ID" != "null" ] && [ -n "$RELEASE_ID" ]; then
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/NoMercy-Entertainment/NoMercy.AndroidApp/releases/$RELEASE_ID
          fi
        continue-on-error: true

      - name: Create Pre-release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.set_version.outputs.VERSION_NAME }}
          release_name: "Release v${{ steps.set_version.outputs.VERSION_NAME }}"
          body: |
            Automated release for build ${{ steps.set_version.outputs.VERSION_NAME }}.
            
            Building artifacts...
          draft: false
          prerelease: true

  build-artifacts:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact: [apk, aab]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          repository: NoMercy-Entertainment/NoMercy.AndroidApp

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Update version in build.gradle.kts
        run: |
          sed -i "s/versionCode = [0-9]\+/versionCode = ${{ needs.create-release.outputs.VERSION_CODE }}/" app/build.gradle.kts
          sed -i "s/versionName = \".*\"/versionName = \"${{ needs.create-release.outputs.VERSION_NAME }}\"/" app/build.gradle.kts

      - name: Build ${{ matrix.artifact }}
        run: |
          chmod +x ./gradlew
          if [ "${{ matrix.artifact }}" == "apk" ]; then
            ./gradlew assembleRelease --stacktrace
          else
            ./gradlew bundleRelease --stacktrace
          fi
          
      - name: Decode keystore and create jks
        run: echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > keystore.jks

      - name: Install build tools
        run: sudo apt-get update && sudo apt-get install -y zipalign apksigner

      - name: Process APK (zipalign then sign)
        if: matrix.artifact == 'apk'
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        run: |
          # First zipalign
          zipalign -v 4 \
            app/build/outputs/apk/release/app-release-unsigned.apk \
            app/build/outputs/apk/release/app-release-aligned.apk
          
          # Then sign
          apksigner sign --ks keystore.jks \
            --ks-key-alias ${{ secrets.KEY_ALIAS }} \
            --ks-pass pass:$KEYSTORE_PASSWORD \
            app/build/outputs/apk/release/app-release-aligned.apk

      - name: Process AAB (sign then zipalign)
        if: matrix.artifact == 'aab'
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        run: |
          # First sign
          jarsigner -verbose -keystore keystore.jks -storepass $KEYSTORE_PASSWORD \
            app/build/outputs/bundle/release/app-release.aab ${{ secrets.KEY_ALIAS }}
          
          # Then zipalign
          zipalign -v 4 \
            app/build/outputs/bundle/release/app-release.aab \
            app/build/outputs/bundle/release/app-release-aligned.aab

      - name: Verify ${{ matrix.artifact }}
        run: |
          if [ "${{ matrix.artifact }}" == "apk" ]; then
            apksigner verify app/build/outputs/apk/release/app-release-aligned.apk
          else
            jarsigner -verify -verbose -certs app/build/outputs/bundle/release/app-release-aligned.aab
          fi

      - name: Rename artifact with version
        run: |
          if [ "${{ matrix.artifact }}" == "apk" ]; then
            mv app/build/outputs/apk/release/app-release-aligned.apk \
               app/build/outputs/apk/release/app-release-aligned-${{ needs.create-release.outputs.VERSION_NAME }}.apk
          else
            mv app/build/outputs/bundle/release/app-release-aligned.aab \
               app/build/outputs/bundle/release/app-release-${{ needs.create-release.outputs.VERSION_NAME }}.aab
          fi

      - name: Upload ${{ matrix.artifact }} to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.UPLOAD_URL }}
          asset_path: app/build/outputs/${{ matrix.artifact == 'apk' && 'apk' || 'bundle' }}/release/app-release${{ matrix.artifact == 'apk' && '-aligned' || '' }}-${{ needs.create-release.outputs.VERSION_NAME }}.${{ matrix.artifact }}
          asset_name: app-release${{ matrix.artifact == 'apk' && '-aligned' || '' }}-${{ needs.create-release.outputs.VERSION_NAME }}.${{ matrix.artifact }}
          asset_content_type: application/${{ matrix.artifact == 'apk' && 'vnd.android.package-archive' || 'octet-stream' }}

  finalize-release:
    needs: [create-release, build-artifacts]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          repository: NoMercy-Entertainment/NoMercy.AndroidApp

      - name: Get release info and artifact URLs
        id: get_release
        run: |
          RELEASE_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/NoMercy-Entertainment/NoMercy.AndroidApp/releases/${{ needs.create-release.outputs.RELEASE_ID }})
          
          APK_URL=$(echo "$RELEASE_JSON" | jq -r '.assets[] | select(.name | endswith(".apk")) | .browser_download_url')
          AAB_URL=$(echo "$RELEASE_JSON" | jq -r '.assets[] | select(.name | endswith(".aab")) | .browser_download_url')
          
          VERSION="v${{ needs.create-release.outputs.VERSION_NAME }}"
          RELEASE_DATE=$(date +"%Y-%m-%d")
          
          APP_BANNER_ICON_URL="https://raw.githubusercontent.com/NoMercy-Entertainment/NoMercyMediaServer/master/src/NoMercy.Server/Assets/logo.png"
          APP_ICON_URL="https://raw.githubusercontent.com/NoMercy-Entertainment/NoMercyMediaServer/master/src/NoMercy.Server/Assets/Linux/icon.png"
          
          echo "apk_url=$APK_URL" >> $GITHUB_OUTPUT
          echo "aab_url=$AAB_URL" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_date=$RELEASE_DATE" >> $GITHUB_OUTPUT
          echo "app_icon_url=$APP_ICON_URL" >> $GITHUB_OUTPUT
          echo "app_banner_icon_url=$APP_BANNER_ICON_URL" >> $GITHUB_OUTPUT

      - name: Download APK for info
        run: |
          curl -L -o app-release.apk "${{ steps.get_release.outputs.apk_url }}"

      - name: Get APK info
        id: artifact_info
        run: |
          echo "artifact_size=$(du -h app-release.apk | cut -f1)" >> $GITHUB_OUTPUT
          echo "artifact_sha256=$(sha256sum app-release.apk | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Update release to production
        run: |
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/NoMercy-Entertainment/NoMercy.AndroidApp/releases/${{ needs.create-release.outputs.RELEASE_ID }} \
            -d '{"prerelease": false, "body": "Automated release for build ${{ needs.create-release.outputs.VERSION_NAME }}.\n\n**APK:** [Download](${{ steps.get_release.outputs.apk_url }})\n**AAB:** [Download](${{ steps.get_release.outputs.aab_url }})\n\n**Size:** ${{ steps.artifact_info.outputs.artifact_size }}\n**SHA256:** `${{ steps.artifact_info.outputs.artifact_sha256 }}`"}'

      - name: Prepare download page
        run: |
          cp download.html index.html
          sed -i "s|{{APK_URL}}|${{ steps.get_release.outputs.apk_url }}|g" index.html
          sed -i "s|{{VERSION}}|${{ steps.get_release.outputs.version }}|g" index.html
          sed -i "s|{{RELEASE_DATE}}|${{ steps.get_release.outputs.release_date }}|g" index.html
          sed -i "s|{{APK_SIZE}}|${{ steps.artifact_info.outputs.artifact_size }}|g" index.html
          sed -i "s|{{APK_SHA256}}|${{ steps.artifact_info.outputs.artifact_sha256 }}|g" index.html
          sed -i "s|{{APP_ICON_URL}}|${{ steps.get_release.outputs.app_icon_url }}|g" index.html
          sed -i "s|{{APP_BANNER_ICON_URL}}|${{ steps.get_release.outputs.app_banner_icon_url }}|g" index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./
          publish_branch: gh-pages
          keep_files: false
          user_name: github-actions[bot]
          user_email: github-actions[bot]@users.noreply.github.com
          force_orphan: true
          enable_jekyll: false